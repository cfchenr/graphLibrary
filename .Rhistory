lineTest$coefficients[1],
"&&",
lineTest$coefficients[2],
"&&",
sigma2_hatTest,
"\\\\\n",
"Verdadeiro",
"&&",
"&&",
"3",
"&&",
"0.5",
"&&",
"1"
)
##### Tabela de Correlação entre B_0, B_1 e S dsas 20 réplicas ######
cat(
"&\\;\\;\\;&",
"B_0",
"&\\;\\;\\;&",
"B_1",
"&\\;\\;\\;&",
"S",
"\\\\\n",
"B_0",
"&&",
"1 && && \\\\\n",
"B_1",
"&&",
round(cor(as.numeric(B_0), as.numeric(B_1)),4),
"&&",
"1",
"&& \\\\\n",
"S",
"&&",
round(cor(as.numeric(B_0), as.numeric(Sigma2_hat)),4),
"&&",
round(cor(as.numeric(B_1), as.numeric(Sigma2_hat)),4),
"&&",
"1 \\\\"
)
##### Gráfico de dispersão de B_0 e B_1 e desenho dos contornos dos elipsóides
library(mvtnorm)
# Desenhar os contornos da Normal
x.points <- seq(1.6,4.2,length.out=500)
y.points <- seq(0.35,0.65,length.out=500)
z <- matrix(0,nrow=500,ncol=500)
for (i in 1:500) {
for (j in 1:500) {
z[i,j] <- dmvnorm(c(x.points[i],y.points[j]),
mean=c(3, 0.5),sigma=matrix(c(0.2952, -0.02857, -0.02857, 0.003571), nrow=2))
}
}
install.packages("mvtnorm")
##########################################################################################
############## Simulação no Modelo de Regressão Linear Simples ###########################
##############               Modelos Estatísticos              ###########################
##########################################################################################
##########################    Cláudio Henriques   ########################################
##########################     Fábio Henriques    ########################################
##########################   Margarida Ferreira   ########################################
##########################################################################################
##### Simulação dos Dados ################################################################
# Parâmetros
beta_0 <- 3
beta_1 <- 0.5
sigma2 <- 1
n <- 15
set.seed(n) # fixar valores de y
x <- 1:n
# Gerar y com distribuição N(beta_0+beta_1*x,sigma2)
y <- round(rnorm(n,beta_0+beta_1*x,sigma2),2)
# Gerar y1 e y2 para mostrar o carácter aleatório da amostra
set.seed(2*n) # fixar valores de y1
y1 <- round(rnorm(n,beta_0+beta_1*x,sigma2),2)
set.seed(3*n) # fixar valores de y2
y2 <- round(rnorm(n,beta_0+beta_1*x,sigma2),2)
# Criar o conjunto de dados usados no exemplo do artigo GoodData
GoodData <- data.frame(x,y)
par(mfrow=c(1,1))
# Fazer a representação gráfica dos dados e da reta de regressão linear do GoodData
plot(GoodData$y,pch=20,main="Gráfico de Dispersão de GoodData",xlab="x",ylab="y")
line=lm(y~x,data=GoodData)
abline(line)
# Fazer a representação gráfica dos dados 1 e 2 e das retas de regressão linear para
# mostrar o carácter aleatório
par(mfrow=c(1,2))
plot(y1,pch=20,main="Gráfico de Dispersão de Data1",xlab="x",ylab="y")
line1=lm(y1~x)
abline(line1)
plot(y2,pch=20,main="Gráfico de Dispersão de Data2",xlab="x",ylab="y")
line2=lm(y2~x)
abline(line2)
# valores da variável resposta y_hat (y chapéu)
y_hat <- line$coefficients[1]+line$coefficients[2]*x
# estimador da variância
sigma2_hat <- (1/(n-2))*sum((y-y_hat)^2)
##### Réplicas ###########################################################################
# Fazer 20 réplicas dos dados
N <- 20
Y <- list()
for(idx in 1:N){
Y[[idx]] <- rnorm(n,beta_0+beta_1*x,1)
}
# Aplicar o Modelo de Regressão Linear às 20 Réplicas
lines <- list()
Y_hat <- list() # Guardar valores de Y gerados nas 20 Réplicas
Sigma2_hat <- list() # Guardar valores da variância residual das 20 Réplicas
B_0 <- list() # Guardar valores de beta_0 das 20 Réplicas
B_1 <- list() # Guardar valores de beta_1 das 20 Réplicas
# Representar as retas das 20 Réplicas
par(mfrow=c(1,1))
plot(Y[[1]],type="n",main="Retas das regressões lineares das réplicas",xlab="x",ylab="y", xlim = c(0, 15), ylim = c(1, 11))
for(idx in 1:N){
lines[[idx]]=lm(Y[[idx]]~x)
abline(lines[[idx]])
Y_hat[[idx]] <- lines[[idx]]$coefficients[1]+lines[[idx]]$coefficients[2]*x
Sigma2_hat[idx] <- (1/(n-2))*sum((Y[[idx]]-Y_hat[[idx]])^2)
B_0[idx] <- lines[[idx]]$coefficients[1]
B_1[idx] <- lines[[idx]]$coefficients[2]
}
# Representar a reta verdadeira
line = lm(3+0.5*x~x)
abline(line, col='red', lwd=2)
# Tabela com B_0 , B_1 e S das 20 Réplicas
for(idx in 1:N) {
cat(
idx,
"&&",
round(lines[[idx]]$coefficients[1],3),
"&&",
round(lines[[idx]]$coefficients[2],3),
"&&",
round(Sigma2_hat[idx],3),
"\\\\",
"\n"
)
}
# Tabela do Sumário Estatístico de B_0
cat(
"B_0",
"&&",
round(mean(as.numeric(B_0)),3),
"&&",
round(median(as.numeric(B_0)),3),
"&&",
round(var(as.numeric(B_0)),3),
"&&",
round(min(as.numeric(B_0)),3),
"&&",
round(max(as.numeric(B_0)),3),
"&&",
round(sd(as.numeric(B_0))/mean(as.numeric(B_0))*100,3),
"\\\\"
)
# Tabela do Sumário Estatístico de B_1
cat(
"B_1",
"&&",
round(mean(as.numeric(B_1)),3),
"&&",
round(median(as.numeric(B_1)),3),
"&&",
round(var(as.numeric(B_1)),3),
"&&",
round(min(as.numeric(B_1)),3),
"&&",
round(max(as.numeric(B_1)),3),
"&&",
round(sd(as.numeric(B_1))/mean(as.numeric(B_1))*100,3),
"\\\\"
)
# Tabela do Sumário Estatístico de S
cat(
"S",
"&&",
round(mean(as.numeric(Sigma2_hat)),3),
"&&",
round(median(as.numeric(Sigma2_hat)),3),
"&&",
round(var(as.numeric(Sigma2_hat)),3),
"&&",
round(min(as.numeric(Sigma2_hat)),3),
"&&",
round(max(as.numeric(Sigma2_hat)),3),
"&&",
round(sd(as.numeric(Sigma2_hat))/mean(as.numeric(Sigma2_hat))*100,3),
"\\\\"
)
##### Aumento do tamanho da amostra, ou seja, do número de observações para 1000 ########
n <- 1000 # número de observações
set.seed(n) # fixar valores de y
xTest <- 1:n
# Gerar y com distribuição N(beta_0+beta_1*x,sigma2)
yTest <- round(rnorm(n,beta_0+beta_1*xTest,sigma2),2)
# Criar o conjunto de dados usados no exemplo do artigo BetterData
BetterData <- data.frame(xTest,yTest)
par(mfrow=c(1,1))
# Aplicação do Modelo de regressão linear ao BetterData
lineTest=lm(yTest~xTest,data=BetterData)
# valores da variável resposta y_hat (y chapéu) de BetterData
y_hatTest <- lineTest$coefficients[1]+lineTest$coefficients[2]*xTest
# estimador da variância de BetterData
sigma2_hatTest <- (1/(n-2))*sum((yTest-y_hatTest)^2)
# Tabela Resumo de Comparação entre os Estimadores de GoodData e BetterData
cat(
"Nome",
"&&",
"Nº de obs.",
"&&",
"\\hat\\beta_0",
"&&",
"\\hat\\beta_1",
"&&",
"\\hat\\sigma^{2}",
"\\\\\n",
"GoodData",
"&&",
"15",
"&&",
line$coefficients[1],
"&&",
line$coefficients[2],
"&&",
sigma2_hat,
"\\\\\n",
"BetterData",
"&&",
"1000",
"&&",
lineTest$coefficients[1],
"&&",
lineTest$coefficients[2],
"&&",
sigma2_hatTest,
"\\\\\n",
"Verdadeiro",
"&&",
"&&",
"3",
"&&",
"0.5",
"&&",
"1"
)
##### Tabela de Correlação entre B_0, B_1 e S dsas 20 réplicas ######
cat(
"&\\;\\;\\;&",
"B_0",
"&\\;\\;\\;&",
"B_1",
"&\\;\\;\\;&",
"S",
"\\\\\n",
"B_0",
"&&",
"1 && && \\\\\n",
"B_1",
"&&",
round(cor(as.numeric(B_0), as.numeric(B_1)),4),
"&&",
"1",
"&& \\\\\n",
"S",
"&&",
round(cor(as.numeric(B_0), as.numeric(Sigma2_hat)),4),
"&&",
round(cor(as.numeric(B_1), as.numeric(Sigma2_hat)),4),
"&&",
"1 \\\\"
)
##### Gráfico de dispersão de B_0 e B_1 e desenho dos contornos dos elipsóides
library(mvtnorm)
# Desenhar os contornos da Normal
x.points <- seq(1.6,4.2,length.out=500)
y.points <- seq(0.35,0.65,length.out=500)
z <- matrix(0,nrow=500,ncol=500)
for (i in 1:500) {
for (j in 1:500) {
z[i,j] <- dmvnorm(c(x.points[i],y.points[j]),
mean=c(3, 0.5),sigma=matrix(c(0.2952, -0.02857, -0.02857, 0.003571), nrow=2))
}
}
contour(x.points,y.points,z, levels = c(5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
#Acrescentar a dispersão dos pontos (B_0,B_1)
points(B_0, B_1, pch=20)
##### Teste de Hipóteses à correlação entre B_0 e S e B_1 e S
cor.test(as.numeric(B_0),as.numeric(Sigma2_hat), method = "pearson")
cor.test(as.numeric(B_1),as.numeric(Sigma2_hat), method = "pearson")
contourLines(x.points,y.points,z, levels = c(5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contourLines(x.points,y.points,z, nleves=10)
contourLines(x.points,y.points,z, nlevels=10)
contourLines(x.points,y.points,z, nlevels=10)
contourLines(x.points,y.points,z, nlevels=10, xlab="B_0", ylab="B_1",col="grey48")
contourLines(x.points,y.points,z, nlevels=10, levels = pretty(range(z,na.rm = TRUE), nlevels))
contourLines(x.points,y.points,z, nlevels=10)
contour(x.points,y.points,z, levels = c(5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
str(contourLines(x.points,y.points,z, nlevels=10))
str(contourLines(x.points,y.points,z, nlevels=2))
contour(x.points,y.points,z,  levels = pretty(zlim, nlevels), nlevels = 20, labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, zlim = range(z, finite = TRUE), levels = pretty(zlim, nlevels), nlevels = 20, labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, zlim = range(z, finite = TRUE), levels = pretty(zlim, nlevels), nlevels = 20, labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, zlim = range(z, finite = TRUE), levels = pretty(zlim, nlevels), nlevels = 20, labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points, y.points, z, zlim = range(z, finite = TRUE), nlevels = 20, levels = pretty(zlim, nlevels), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
zlim = range(z, finite = TRUE)
contour(x.points, y.points, z,  nlevels = 20, levels = pretty(zlim, nlevels), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
#Acrescentar a dispersão dos pontos (B_0,B_1)
points(B_0, B_1, pch=20)
clines <- contourLines(x.points, y.points, z)
x <- clines[[9]][["x"]]
y <- clines[[9]][["y"]]
level <- clines[[9]][["level"]]
level
contour(x.points,y.points,z, levels = c(10,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
#Acrescentar a dispersão dos pontos (B_0,B_1)
points(B_0, B_1, pch=20)
contour(x.points,y.points,z, levels = c(0,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(!,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(1,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(2,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(0,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(0,5,3.5,2,1.5), labels=c(0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(0,5,3.5,2,1.5), labels=c(x,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(0,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(0.1,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(11,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10.9,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10.5,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10.2,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10.3,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10.4,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
contour(x.points,y.points,z, levels = c(10.3,5,3.5,2,1.5), labels=c(15,0.5,0.75,0.9,0.95), xlab="B_0", ylab="B_1",col="grey48")
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tinytex")
View(line1)
install.packages("pdflatex")
install.packages("pdflatex")
install.packages("car")
install.packages("car")
install.packages("car")
install.packages("carData")
install.packages("knitr")
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
setwd("G:/OneDrive - Universidade de Aveiro/Mestrado - Matemática/sma")
#use igraph for example
library(igraph)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
m=as.matrix(dat)
if ('-1' %in% m) {
net=graph.adjacency(m,mode="directed",weighted=NULL,diag=FALSE)
} else {
net=graph.adjacency(m,mode="undirected",weighted=NULL,diag=FALSE)
}
#import the sample_attributes file:
a=read.csv(file.choose())
V(net)$Color=as.character(a$Color[match(V(net)$name,a$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#import the sample_attributes file:
b=read.csv(file.choose())
V(net)$Color=as.character(b$Color[match(V(net)$name,b$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#import the sample_attributes file:
c=read.csv(file.choose())
V(net)$Color=as.character(c$Color[match(V(net)$name,c$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#use igraph for example
library(igraph)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
m=as.matrix(dat)
if ('-1' %in% m) {
net=graph.adjacency(m,mode="directed",weighted=NULL,diag=FALSE)
} else {
net=graph.adjacency(m,mode="undirected",weighted=NULL,diag=FALSE)
}
#import the sample_attributes file:
a=read.csv(file.choose())
V(net)$Color=as.character(a$Color[match(V(net)$name,a$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#import the sample_attributes file:
b=read.csv(file.choose())
V(net)$Color=as.character(b$Color[match(V(net)$name,b$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#import the sample_attributes file:
c=read.csv(file.choose())
V(net)$Color=as.character(c$Color[match(V(net)$name,c$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#use igraph for example
library(igraph)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
m=as.matrix(dat)
if ('-1' %in% m) {
net=graph.adjacency(m,mode="directed",weighted=NULL,diag=FALSE)
} else {
net=graph.adjacency(m,mode="undirected",weighted=NULL,diag=FALSE)
}
#import the sample_attributes file:
a=read.csv(file.choose())
V(net)$Color=as.character(a$Color[match(V(net)$name,a$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#import the sample_attributes file:
b=read.csv(file.choose())
V(net)$Color=as.character(b$Color[match(V(net)$name,b$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
#import the sample_attributes file:
c=read.csv(file.choose())
V(net)$Color=as.character(c$Color[match(V(net)$name,c$id)])
V(net)$color=V(net)$Color
V(net)$color=gsub("1","red",V(net)$color)
V(net)$color=gsub("2","cyan",V(net)$color)
V(net)$color=gsub("3","yellow",V(net)$color)
V(net)$color=gsub("4","purple",V(net)$color)
V(net)$color=gsub("5","green",V(net)$color)
V(net)$color=gsub("6","orange",V(net)$color)
V(net)$color=gsub("7","blue",V(net)$color)
V(net)$color=gsub("8","white",V(net)$color)
V(net)$color=gsub("9","grey",V(net)$color)
V(net)$color=gsub("10","black",V(net)$color)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
